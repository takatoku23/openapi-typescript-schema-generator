const fs = require('fs');
const path = require('path');

// ファイルパスの設定
const typeDefPaths = [
  { path: path.join(__dirname, `{openapi-typscriptで生成されたファイルパス}`), importPath: '{openapi-typscriptで生成されたディレクトリ}', prefix: `{ファイル&変数名のプレフィックス}` },
];
const outputDir = path.join(__dirname, '{outputする先}');

// 出力ディレクトリの作成
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
}

// ファイル読み込み関数
const readFile = (filePath) => {
  try {
    return fs.readFileSync(filePath, 'utf8');
  } catch (error) {
    console.error(`Error reading file from ${filePath}:`, error);
    process.exit(1);
  }
};

// schemas部分の抽出
const extractSchemas = (typeDefs) => {
  const match = typeDefs.match(/schemas:\s*{([\s\S]*?)\n}/s);
  return match ? match[1].trim() : null;
};

// スキーマ型の抽出
const extractSchemaTypes = (schemasContent) => {
  return schemasContent.match(/(\w+):\s*{[^}]*}/g) || [];
};

// 型エイリアスの生成
const generateTypeAliases = (schemaTypes, prefix, importPath) => {
  return schemaTypes.map(type => {
    const match = type.match(/(\w+):\s*{/);
    if (match) {
      const typeName = match[1].trim();
      return `export type ${prefix}${typeName.charAt(0).toUpperCase() + typeName.slice(1)} = ${importPath.replace(/[@/]/g, '_')}['schemas']['${typeName}'];`;
    }
    return null;
  }).filter(Boolean).join('\n');
};

// エクスポートファイルの書き込み
const writeOutputFile = (outputPath, content) => {
  try {
    fs.writeFileSync(outputPath, content, 'utf8');
    console.log(`Type aliases exported to ${outputPath}`);
  } catch (error) {
    console.error(`Error writing to file ${outputPath}:`, error);
    process.exit(1);
  }
};

// メイン処理
const main = () => {
  typeDefPaths.forEach(({ path: filePath, importPath, prefix }) => {
    const typeDefs = readFile(filePath);
    const schemasContent = extractSchemas(typeDefs);

    if (!schemasContent) {
      console.error(`schemas not found in type definitions for ${filePath}.`);
      process.exit(1);
    }

    const schemaTypes = extractSchemaTypes(schemasContent);

    if (schemaTypes.length === 0) {
      console.error(`No schema types found for ${filePath}.`);
      process.exit(1);
    }

    const typeAliases = generateTypeAliases(schemaTypes, prefix, importPath);
    const outputContent = `
/**
 * This file is auto-generated by generateTypeAliases.js
 * Do not make direct changes to the file.
 */

import { components as ${importPath.replace(/[@/]/g, '_')} } from '${importPath}';

${typeAliases}
`;

    const outputPath = path.join(outputDir, `${prefix}Schemas.ts`);
    writeOutputFile(outputPath, outputContent);
  });
};

main();
